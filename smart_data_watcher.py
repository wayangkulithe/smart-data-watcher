#!/usr/bin/env python3
"""
Smart Data Watcher - AI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
–û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Twitter, Reddit –∏ –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.
"""

import requests
import time
import random

def get_fake_social_sentiment():
    """–ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü—Å–µ—Ç–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ API)"""
    sentiments = ["bullish", "bearish", "neutral"]
    return random.choice(sentiments)

def get_crypto_price(symbol="BTC"):
    """–ë–µ—Ä—ë–º —Ü–µ–Ω—É —Å CoinGecko API"""
    url = f"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
    try:
        data = requests.get(url).json()
        return data["bitcoin"]["usd"]
    except:
        return None

def analyze_and_recommend():
    sentiment = get_fake_social_sentiment()
    price = get_crypto_price()

    if price is None:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
        return

    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${price}")
    print(f"üß† –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment}")

    if sentiment == "bullish":
        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É")
    elif sentiment == "bearish":
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º, –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞")
    else:
        print("‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞–±–ª—é–¥–∞—Ç—å")

if __name__ == "__main__":
    print("üöÄ Smart Data Watcher –∑–∞–ø—É—â–µ–Ω!")
    analyze_and_recommend()
